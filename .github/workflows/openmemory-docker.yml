name: OpenMemory Docker Build and Deploy

on:
  push:
    branches: [implementation/school-law]
    paths:
      - 'openmemory/**'
  pull_request:
    paths:
      - 'openmemory/**'
  workflow_dispatch:

env:
  REGISTRY: schoollawregistry.azurecr.io
  API_IMAGE_NAME: openmemory-api
  UI_IMAGE_NAME: openmemory-ui

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      openmemory_changed: ${{ steps.filter.outputs.openmemory }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          openmemory:
            - 'openmemory/**'

  build-and-push:
    needs: check_changes
    if: needs.check_changes.outputs.openmemory_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: api
            dockerfile: openmemory/api/Dockerfile
            context: openmemory/api
            image: openmemory-api
          - service: ui
            dockerfile: openmemory/ui/Dockerfile
            context: openmemory/ui
            image: openmemory-ui
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/implementation/school-law' }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Output image digest
      run: echo "Image digest for ${{ matrix.service }} built successfully"