[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "embedchain"
version = "0.1.128"
description = "Simplest open source retrieval (RAG) framework"
authors = [
    { name = "Taranjeet Singh", email = "taranjeet@embedchain.ai" },
    { name = "Deshraj Yadav", email = "deshraj@embedchain.ai" },
]
license = "Apache License"
readme = "README.md"
requires-python = ">=3.9,<=3.13.2"
dependencies = [
    "python-dotenv>=1.0.0",
    "langchain>=0.3.1",
    "requests>=2.31.0",
    "openai>=1.1.1",
    "chromadb>=0.5.10",
    "posthog>=3.0.2",
    "rich>=13.7.0",
    "beautifulsoup4>=4.12.2",
    "pypdf>=5.0.0",
    "gptcache>=0.1.43",
    "pysbd>=0.3.4",
    "mem0ai>=0.1.54",
    "schema>=0.7.5",
    "sqlalchemy>=2.0.27",
    "alembic>=1.13.1",
    "langchain-cohere>=0.3.0",
    "langchain-community>=0.3.1",
    "langsmith>=0.3.18",
    "langchain-openai>=0.2.1",
]

[project.optional-dependencies]
opensource = [
    "sentence-transformers>=2.2.2",
    "torch==2.3.0",
    "gpt4all==2.0.2",
]
lancedb = ["lancedb>=0.6.2"]
elasticsearch = ["elasticsearch>=8.9.0"]
opensearch = ["opensearch-py>=2.3.1"]
weaviate = ["weaviate-client>=3.24.1"]
qdrant = ["qdrant-client>=1.6.3"]
together = ["together>=1.2.1"]
milvus = ["pymilvus==2.4.3"]
vertexai = ["langchain-google-vertexai>=2.0.2"]
llama2 = ["replicate>=0.15.4"]
gmail = [
    "requests",
    "google-api-python-client>=2.111.0",
    "google-auth>=2.25.2",
    "google-auth-oauthlib>=1.2.0",
    "google-auth-httplib2>=0.2.0",
    "google-api-core>=2.15.0",
]
googledrive = [
    "google-api-python-client>=2.111.0",
    "google-auth-oauthlib>=1.2.0",
    "google-auth-httplib2>=0.2.0",
]
postgres = [
    "psycopg>=3.1.12",
    "psycopg-binary>=3.1.12",
    "psycopg-pool>=3.1.8",
]
mysql = ["mysql-connector-python>=8.1.0"]
google = ["google-generativeai>=0.3.0"]
mistralai = ["langchain-mistralai>=0.2.0"]
aws = ["langchain-aws>=0.2.1"]
dev = [
    "black>=23.3.0",
    "pre-commit>=3.2.2",
    "ruff>=0.1.11",
    "pytest>=7.3.1",
    "pytest-mock>=3.10.0",
    "pytest-env>=0.8.1",
    "click>=8.1.3",
    "isort>=5.12.0",
    "pytest-cov>=4.1.0",
    "responses>=0.23.3",
    "mock>=5.1.0",
    "pytest-asyncio>=0.21.1",
]

[project.scripts]
ec = "embedchain.cli:cli"

[tool.hatch.build.targets.wheel]
packages = ["embedchain"]

[tool.hatch.build.targets.wheel.shared-data]
"README.md" = "README.md"

[tool.hatch.envs.default.scripts]
format = [
    "black .",
    "isort .",
]
lint = [
    "ruff check .",
]
test = [
    "pytest {args}",
]
coverage = [
    "pytest --cov=embedchain --cov-report=xml",
]

[tool.ruff]
line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv"
]
target-version = "py38"

[tool.ruff.lint]
select = ["ASYNC", "E", "F"]
ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"embedchain/__init__.py" = ["E401"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.pants.d
  | \.pytype
  | \.ruff_cache
  | \.svn
  | \.tox
  | \.venv
  | __pypackages__
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
)/
'''

[tool.black.format]
color = true